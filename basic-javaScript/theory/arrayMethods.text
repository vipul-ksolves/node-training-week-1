## JavaScript Array pop()
1) The pop() method removes the last element from an array
2) The pop() method returns the value that was "popped out"


## JavaScript Array push()
1) The push() method adds a new element to an array (at the end)
2) The push() method returns the new array length

## JavaScript Array shift()
1) The shift() method removes the first array element and "shifts" all other 
elements to a lower index.
2) The shift() method returns the value that was "shifted out":


## JavaScript Array unshift()
1) The unshift() method adds a new element to an array (at the beginning), and "unshifts" 
older elements:
2) The unshift() method returns the new array length:

## JavaScript Array length
1) The length property provides an easy way to append a new element to an array:

## JavaScript Array delete()
1) Array elements can be deleted using the JavaScript operator delete.
2) Using delete leaves undefined holes in the array.
3) Use pop() or shift() instead.
4) returns true/false


## Merging (Concatenating) Arrays
1) The concat() method creates a new array by merging (concatenating) existing arrays:



## JavaScript Array splice()
1. The first parameter (2) defines the position where new elements should be added (spliced in).
2. The second parameter (0) defines how many elements should be removed.
3. The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
4. The splice() method returns an array with the deleted items:



## Using splice() to Remove Elements
With clever parameter setting, you can use splice() to remove elements without leaving 
"holes" in the array:
The first parameter (0) defines the position where new elements should be added (spliced in).
The second parameter (1) defines how many elements should be removed.
The rest of the parameters are omitted. No new elements will be added.


## JavaScript Array slice()
The slice() method slices out a piece of an array into a new array.
This example slices out a part of an array starting from array element 1 ("Orange"):
The slice() method creates a new array.
The slice() method does not remove any elements from the source array.


